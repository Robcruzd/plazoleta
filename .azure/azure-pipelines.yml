trigger:
  branches:
    include:
      - main

jobs:
  - job: BuildAndTest
    displayName: 'Build and Test'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: $(NODE_VERSION)
        displayName: 'TOOLS: install Node.js'
      - task: JavaToolInstaller@0
        inputs:
          versionSpec: '11'
          jdkArchitectureOption: 'x64'
          jdkSourceOption: 'PreInstalled'
        displayName: 'Change Java version'

      - checkout: self

      - task: Gradle@2
        displayName: 'Build and Test'
        inputs:
          workingDirectory: 'path/to/your/project'
          tasks: 'clean build test'

      - task: PublishBuildArtifacts@1
        inputs:
          artifactName: 'jar'
          pathToPublish: '$(build.artifactStagingDirectory)'

#      - task: Docker@2
#        displayName: 'Build and Push Docker Image'
#        inputs:
#          containerRegistry: 'tu-registro-de-docker-en-azure'
#          repository: 'nombre-de-tu-repositorio-docker'
#          command: 'buildAndPush'
#          Dockerfile: 'path/to/your/project/Dockerfile'
#          tags: '$(Build.BuildId)'

#  - job: BuildDockerImage
#    displayName: 'Build and Push Docker Image'
#    dependsOn: BuildAndTest
#    pool:
#      vmImage: 'ubuntu-latest'
#    steps:
#      - task: Docker@2
#        displayName: 'Build and Push Docker Image'
#        inputs:
#          containerRegistry: 'tu-registro-de-docker-en-azure'
#          repository: 'nombre-de-tu-repositorio-docker'
#          command: 'buildAndPush'
#          Dockerfile: 'path/to/your/project/Dockerfile'
#          tags: '$(Build.BuildId)'

#  - job: DeployToElasticBeanstalk
#    displayName: 'Deploy to Elastic Beanstalk'
#    dependsOn: BuildDockerImage
#    pool:
#      vmImage: 'ubuntu-latest'
#    steps:
#      - task: AWSCLI@1
#        displayName: 'Login to AWS ECR'
#        inputs:
#          awsCredentials: 'nombre-de-tus-credenciales-de-AWS-en-Azure'
#          regionName: 'tu-regi贸n-de-AWS'
#          command: 'ecr get-login-password'
#        env:
#          AWS_ACCOUNT_ID: 'tu-ID-de-cuenta-de-AWS'
#          ECR_REPOSITORY: 'nombre-de-tu-repositorio-docker'
#
#      - script: |
#          docker build -t $(AWS_ACCOUNT_ID).dkr.ecr.$(AWS_REGION).amazonaws.com/$(ECR_REPOSITORY):$(Build.BuildId) .
#          docker push $(AWS_ACCOUNT_ID).dkr.ecr.$(AWS_REGION).amazonaws.com/$(ECR_REPOSITORY):$(Build.BuildId)
#        displayName: 'Build and Push Docker Image to ECR'
#        env:
#          AWS_REGION: 'tu-regi贸n-de-AWS'
#          AWS_ACCOUNT_ID: 'tu-ID-de-cuenta-de-AWS'
#          ECR_REPOSITORY: 'nombre-de-tu-repositorio-docker'
#
#      - task: ElasticBeanstalkDeploy@0
#        displayName: 'Deploy to Elastic Beanstalk'
#        inputs:
#          awsCredentials: 'nombre-de-tus-credenciales-de-AWS-en-Azure'
#          regionName: 'tu-regi贸n-de-AWS'
#          applicationName: 'nombre-de-tu-aplicaci贸n-en-Elastic-Beanstalk'
#          environmentName: 'nombre-de-tu-entorno-en-Elastic-Beanstalk'
#          sourceBundle: 'app.zip'
